import { {{ pepyatka_node_env }} as postgresConfig} from '../../knexfile'

// - DO NOT set this. It is taken from real env -
// process.env.MONITOR_PREFIX = ''

var fs = require('fs')
{% if pepyatka_mailer_smtp_enabled %}
var nodemailer = require('nodemailer')
var transport = require('nodemailer-smtp-transport')
{% else %}
const transport = function () {
  return {
    name:    'minimal',
    version: '0.1.0',
    send:    function (mail, callback) {
      const input = mail.message.createReadStream();
      input.pipe(process.stdout);
      input.on('end', () => {
        callback(null, true)
      })
    }
  }
}
{% endif %}

exports.getConfig = function() {
  var config = {
    port: 3000,
    database: 2,

    secret: '{{ pepyatka_secret }}',

    origin: '{{ pepyatka_origin }}',

    serviceName: '{{ pepyatka_service_name }}',
    appRoot: '{{ pepyatka_home_dir}}/pepyatka-server',
    acceptHashedPasswordsOnly: {{ pepyatka_accept_hashed_passwords_only }},
    logLevel: 'warn',
    logResponseTime: true,
    trustProxyHeaders: true,
    onboardingUsername: '{{ pepyatka_onboarding_username }}',
    recaptcha: {
      enabled: {{ recaptcha_enabled | string | lower }},
      secret: '{{ recaptcha_server_secret }}'
    },
    sentryDsn: '{{ sentry_dsn }}',
    dynamicRiverOfNews: true,
    frontendPreferencesLimit: 65536
  }

  config.host = '{{ pepyatka_frontend_scheme }}://{{ pepyatka_hostname }}'

  var extraStopList = fs.readFileSync('{{ pepyatka_home_dir }}/pepyatka-server/config/banlist.txt')
    .toString()
    .split('\n')
    .filter(function(n) { return n != '' })

  config.application = {
    USERNAME_STOP_LIST: [
      '404', 'about', 'account', 'anonymous', 'attachments', 'dev', 'files', 'filter',
      'friends', 'groups', 'help', 'home', 'iphone', 'list', 'logout', 'profilepics',
      'public', 'requests', 'search', 'settings', 'share', 'signin', 'signup', 'summary'
    ],
    EXTRA_STOP_LIST: extraStopList
  }

  config.media = {
    // Public URL prefix
    url: '{{ pepyatka_frontend_scheme }}://{{ pepyatka_media_hostname }}/', // must have trailing slash

    // File storage
    storage: {
      // 'fs' for local file system or 's3' for AWS S3
      type: '{{ pepyatka_storage_type }}',

      // Parameters for 'fs'
      rootDir: '{{ pepyatka_files_dir }}/', // must have trailing slash

      // Parameters for 's3'
      accessKeyId: {{ pepyatka_aws_access_key }},
      secretAccessKey: {{ pepyatka_aws_secret_key }},
      bucket: '{{ pepyatka_s3_bucket }}'
    }
  }
  config.attachments = {
    url: config.media.url,
    storage: config.media.storage,
    path: 'attachments/', // must have trailing slash
    fileSizeLimit: '{{ pepyatka_file_size_limit }}',
    maxCount:      20,
    imageSizes: {
      t: {
        path: 'attachments/thumbnails/', // must have trailing slash
        bounds: { width: 525, height: 175 }
      },
      t2: {
        path: 'attachments/thumbnails2/', // must have trailing slash
        bounds: { width: 1050, height: 350 }
      }
    }
  }
  config.profilePictures = {
    url: config.media.url,
    storage: config.media.storage,
    path: 'profilepics/', // must have trailing slash
    defaultProfilePictureMediumUrl: 'https://media.freefeed.net/attachments/d067713e-0ba4-4d0a-ae1f-41b31780fda3.png',
  }

  config.mailer = {
    transport: transport,
    fromName: '{{ pepyatka_mailer_from_name }}',
    fromEmail: '{{ pepyatka_mailer_from_email }}',
    resetPasswordMailSubject: '{{ pepyatka_service_name }} password reset',
    host: '{{ pepyatka_frontend_scheme }}://{{ pepyatka_hostname}}',
    options: {
{% if pepyatka_mailer_smtp_enabled %}
      host: '{{ pepyatka_mailer_smtp_host }}',
      port: {{ pepyatka_mailer_smtp_port }},
      secure: {{ pepyatka_mailer_smtp_secure }},
      auth: {
          user: '{{ pepyatka_mailer_smtp_user }}',
          pass: '{{ pepyatka_mailer_smtp_pass }}'
      }
{% endif %}
    },
    adminRecipient: {
      email: 'archives@freefeed.net',
      screenName: 'Archive admins'
    },
  }

  config.redis = {
    host: '{{ pepyatka_redis_host }}',
    port: {{ pepyatka_redis_port }},
    options: {
      retry_max_delay: 2000,
      connect_timeout: 15000,
      max_attempts: 2
    }
  }

  config.performance = {
    // PostgreSQL 'statement_timeout' for search queries in milliseconds (0 => no timeout)
    searchQueriesTimeout: 45000,
  };

  /**
  * Fill this object with provider-specific credentials like:
  * facebook: {
  *   clientId:     '####',
  *   clientSecret: '####',
  * }
  *
  * Only 'facebook' and 'google' providers are supported for now.
  */
  config.externalAuthProviders = {
  {% if freefeed_external_auth_providers_enabled %}
    google: {
      clientId: '{{ freefeed_external_auth_google_client_id }}',
      clientSecret: '{{ freefeed_external_auth_google_client_secret }}'
    },
    facebook: {
      clientId: '{{ freefeed_external_auth_facebook_client_id }}',
      clientSecret: '{{ freefeed_external_auth_facebook_client_secret }}'
    }
  {% endif %}
  },

  config.postgres = postgresConfig

  return config
}
